// Jenkinsfile for MLBParks
def maven = '/opt/rh/rh-maven33/root/usr/bin/mvn -s ./nexus_settings.xml'

pipeline {
  agent {
    kubernetes {
      cloud "openshift"
      label 'skopeo-pod'
      inheritFrom "maven"
      containerTemplate {
        name 'jnlp'
        image "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-slave-appdev"
        resourceRequestMemory '1Gi'
        resourceLimitMemory '2Gi'
      }
    }
  }
  options { retry(3) }
  stages {
    stage('Initial Settings') {
      steps {
        container('jnlp') {
          echo "GUID: ${GUID}"
          echo "CLUSTER: ${CLUSTER}"
          echo "FAST_MODE: ${FAST_MODE}"
          sh 'skopeo --version'
          sh "$maven -version"
          sh 'pwd'
          sh 'ls'
          // https://stackoverflow.com/questions/44099851/how-do-i-pass-variables-between-stages-in-a-declarative-jenkins-pipeline
          script {
            // Extract version and other properties from the pom.xml
            groupId    = getGroupIdFromPom("./MLBParks/pom.xml")
            artifactId = getArtifactIdFromPom("./MLBParks/pom.xml")
            version    = getVersionFromPom("./MLBParks/pom.xml")
            // Set the tag for the development image: version + build number
            devTag  = "${version}-${BUILD_NUMBER}"
            // Set the tag for the production image: version
            prodTag = "${version}"
          }
          echo "devTag: ${devTag}"
          echo "prodTag: ${prodTag}"

          // Your Pipeline Code goes here. Make sure to use the ${GUID} and ${CLUSTER} parameters where appropriate
          // You need to build the application in directory `MLBParks`.
          // Also copy "../nexus_settings.xml" to your build directory
          // and replace 'GUID' in the file with your ${GUID} to point to >your< Nexus instance
          sh "sed -e 's/\\GUID/${GUID}/' ./nexus_settings.xml > ./MLBParks/nexus_settings.xml"
        }
      }
    }
    stage('Maven Build') {
      steps {
        container('jnlp') {
          dir('MLBParks') {
            sh "$maven clean install -DskipTests=true"
          }
        }
      }
    }
    stage('Unit Tests & Sonar') {
      when {
        expression { FAST_MODE != 'true' }
      }
      parallel {
        stage('Unit Tests') {
          steps {
            container('jnlp') {
              dir('MLBParks') {
                sh "$maven test"
              }
            }
          }
        }
        stage('Sonar') {
          steps {
            container('jnlp') {
              dir('MLBParks') {
                sh "$maven sonar:sonar -Dsonar.ws.timeout=6000 -Dsonar.host.url=http://sonarqube-${GUID}-sonarqube.apps.${CLUSTER} -Dsonar.projectName=${JOB_BASE_NAME}-${devTag}"
              }
            }
          }
        }
      }
    }
    stage('Deployment to Registry') {
      parallel {
        stage('Publish WAR to Nexus') {
          when {
            expression { FAST_MODE != 'true' }
          }
          steps {
            container('jnlp') {
              dir('MLBParks') {
                echo "Publish to Nexus"
                sh "$maven deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::http://nexus3-${GUID}-nexus.apps.${CLUSTER}/repository/releases"
              }
            }
          }
        }
        stage('Build and Tag OpenShift Image') {
          steps {
            container('jnlp') {
              dir('MLBParks') {
                echo "Building OpenShift container image tasks:${devTag}"
                // Start Binary Build in OpenShift using the file we just published
                // The filename is openshift-tasks.war in the 'target' directory of your current
                // Jenkins workspace
//                sh "oc new-build --binary=true --name='mlbparks' jboss-eap70-openshift:1.7 --allow-missing-imagestream-tags=true -n ${GUID}-parks-dev"
                sh "oc start-build mlbparks --follow --from-file=./target/mlbparks.war -n ${GUID}-parks-dev"
                // Tag the image using the devTag
                openshiftTag alias: 'false', destStream: 'mlbparks', destTag: "${devTag}", destinationNamespace: "${GUID}-parks-dev", namespace: "${GUID}-parks-dev", srcStream: 'mlbparks', srcTag: 'latest', verbose: 'false'
              }
            }
          }
        }
      }
    }
    // Deploy the built image to the Development Environment.
    stage('Deploy Image to Dev') {
      steps {
        container('jnlp') {
          dir('MLBParks') {
            echo "Deploying container image to Development Project"

            // Update the Image on the Development Deployment Config
            sh "oc set image dc/mlbparks mlbparks=docker-registry.default.svc:5000/${GUID}-parks-dev/mlbparks:${devTag} -n ${GUID}-parks-dev"

            // Deploy the development application.
            openshiftDeploy depCfg: 'mlbparks', namespace: "${GUID}-parks-dev", verbose: 'false', waitTime: '20', waitUnit: 'min'
            openshiftVerifyDeployment depCfg: 'mlbparks', namespace: "${GUID}-parks-dev", replicaCount: '1', verbose: 'false', verifyReplicaCount: 'false', waitTime: '20', waitUnit: 'min'
            openshiftVerifyService namespace: "${GUID}-parks-dev", svcName: 'mlbparks', verbose: 'false'
          }
        }
      }
    }
    // Run Integration Tests in the Development Environment.
    stage('Integration Tests') {
      when {
        expression { FAST_MODE != 'true' }
      }
      steps {
        container('jnlp') {
          dir('MLBParks') {
            echo "Running Integration Tests"
            sleep 30

            // https://github.com/wkulhanek/advdev_homework_template/tree/master/MLBParks

            echo "Checking mlbparks service"
            sh "curl http://mlbparks-${GUID}-parks-dev.apps.na39.openshift.opentlc.com/ws/healthz/"

            echo "Retrieving Service Info"
            sh "curl http://mlbparks-${GUID}-parks-dev.apps.na39.openshift.opentlc.com/ws/info/"
          }
        }
      }
    }
    stage('Populate the MLB Parks Data') {
      steps {
        container('jnlp') {
          dir('MLBParks') {
            echo "Populate the MLB Parks Data into the MongoDB database"
            sh "curl http://mlbparks-${GUID}-parks-dev.apps.na39.openshift.opentlc.com/ws/data/load/"
          }
        }
      }
    }
    // Copy Image to Nexus Docker Registry
    stage('Copy Image to Nexus Docker Registry') {
      when {
        expression { FAST_MODE != 'true' }
      }
      steps {
        container('jnlp') {
          dir('MLBParks') {
            echo "Copy image to Nexus Docker Registry"

            sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds openshift:\$(oc whoami -t) --dest-creds admin:admin123 docker://docker-registry.default.svc.cluster.local:5000/${GUID}-parks-dev/mlbparks:${devTag} docker://nexus-registry.${GUID}-nexus.svc.cluster.local:5000/mlbparks:${devTag}"

            // Tag the built image with the production tag.
            openshiftTag alias: 'false', destStream: 'mlbparks', destTag: "${prodTag}", destinationNamespace: "${GUID}-parks-dev", namespace: "${GUID}-parks-dev", srcStream: 'mlbparks', srcTag: "${devTag}", verbose: 'false'
          }
        }
      }
    }
    // Automatically executes the blue-green go-live switch
    stage('Blue-Green go-live switch') {
      steps {
        container('jnlp') {
          dir('Infrastructure/bin') {
            echo "Automatically executes the blue-green go-live switch"
            sh "./switch_backend_service_color.sh mlbparks ${GUID} ${CLUSTER}"
          }
        }
      }
    }
  }
}

// Convenience Functions to read variables from the pom.xml
// Do not change anything below this line.
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
  matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
  matcher ? matcher[0][1] : null
}
