// Jenkinsfile for MLBParks
def maven = '/opt/rh/rh-maven33/root/usr/bin/mvn'

pipeline {
  agent {
    kubernetes {
      cloud "openshift"
      label 'skopeo-pod_2x'
      inheritFrom "maven"
      containerTemplate {
        name 'jnlp'
        image "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-slave-appdev"
        resourceRequestMemory '1Gi'
        resourceLimitMemory '2Gi'
      }
    }
  }
  stages {
    // The following variables need to be defined at the top level
    // and not inside the scope of a stage - otherwise they would not
    // be accessible from other stages.
    // Extract version and other properties from the pom.xml
    def groupId    = getGroupIdFromPom("./MLBParks/pom.xml")
    def artifactId = getArtifactIdFromPom("./MLBParks/pom.xml")
    def version    = getVersionFromPom("./MLBParks/pom.xml")
    // Set the tag for the development image: version + build number
    def devTag  = "${version}-${BUILD_NUMBER}"
    // Set the tag for the production image: version
    def prodTag = "${version}"

    stage('Initial Settings') {
      steps {
        container('jnlp') {
          echo "GUID: ${GUID}"
          echo "CLUSTER: ${CLUSTER}"
          echo "devTag: ${devTag}"
          echo "prodTag: ${prodTag}"
          sh 'skopeo --version'
          sh "$maven -version"
          sh 'pwd'
          sh 'ls'
        }
      }
    }
    stage('Maven Build') {
      steps {
        container('jnlp') {
          // Your Pipeline Code goes here. Make sure to use the ${GUID} and ${CLUSTER} parameters where appropriate
          // You need to build the application in directory `MLBParks`.
          // Also copy "../nexus_settings.xml" to your build directory
          // and replace 'GUID' in the file with your ${GUID} to point to >your< Nexus instance
          sh "sed -e 's/\\GUID/${GUID}/' ./nexus_settings.xml > ./MLBParks/nexus_settings.xml"
          dir('MLBParks') {
            sh "$maven -s ./nexus_settings.xml clean install -DskipTests=true"
          }
        }
      }
    }
    stage('Unit Tests & Sonar') {
      parallel {
        stage('Unit Tests') {
          steps {
            container('jnlp') {
              dir('MLBParks') {
                sh "$maven -s ./nexus_settings.xml test"
              }
            }
          }
        }
        stage('Sonar') {
          steps {
            container('jnlp') {
              dir('MLBParks') {
                sh "$maven sonar:sonar -s ./nexus_settings.xml -Dsonar.host.url=http://sonarqube-${GUID}-sonarqube.apps.${CLUSTER} -Dsonar.projectName=${JOB_BASE_NAME}-${devTag}" 
              }
            }
          }
        }
      }
    }
  }
}

// Convenience Functions to read variables from the pom.xml
// Do not change anything below this line.
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
  matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
  matcher ? matcher[0][1] : null
}
